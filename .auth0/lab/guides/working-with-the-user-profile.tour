{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Working with the user profile",
  "steps": [
    {
      "file": "",
      "line": 1,
      "title": "What you'll do",
      "description": "## What you'll learn\n\n**Here's what you'll do:**\n\n* Retrieve the normalized profile of a user\n* Update app metadata\n* Update user metadata"
    },
    {
      "file": "",
      "line": 1,
      "title": "Find a user",
      "description": "## Find a user\n\n_Ensure you're working in your *dev-* tenant!_\n\n1. #### Log into the Auth0 Dashboard.  \n\n    You will see the Activity page displayed. This page shows a summary of authentication and signup activity. Both latest logins and latest signups are displayed at the bottom of the page.  \n\n1. #### In the left-hand navigation, click _User Management_, then, _Users_. The Users list page is displayed.  \n\n   ![profile-1](https://cdn.auth0.com/website/a0fun/v2/profile-1.gif)  \n\n1. #### In the search bar, change the _Search by_ drop down to __Email__.  \n\n    ![profile-2](https://cdn.auth0.com/website/a0fun/v2/profile-2.gif)  \n\n    Notice that the search field has been pre-populated to search for the email address sample@auth0.com using the syntax:  \n\n    _email:\"sample@auth0.com\"_  \n\n    If you want to know more about the search syntax, read the [User Search](https://auth0.com/docs/users/user-search) documentation.  \n\n1. #### Change the search to read:  \n\n    ```\n    email:*+auth0labs*  \n    ```\n\n    and hit the _Enter_ key.  \n\n    The wildcards in the search will return any email address containing the string “+auth0labs” and you ought to see the user you created as the result.   \n\n    ![profile-3](https://cdn.auth0.com/website/a0fun/v2/profile-3.gif)  \n\n1. #### Click the +auth0labs user account.  \n\n    You will see the user’s details page displayed which allows you to interact with the user’s account and profile information. The user’s name, profile image, and user id are displayed in the header next to an _Actions_ menu (the dropdown menu on the top right).   \n\n    ![profile-4](https://cdn.auth0.com/website/a0fun/v2/profile-4.gif)  \n\n1. #### Click the _Actions_ menu button.  \n\n    ![profile-5](https://cdn.auth0.com/website/a0fun/v2/profile-5.gif)  \n\n    A list of useful user actions is available here. You can Block or Delete the user as well as send a verification email to their email address.  \n\n    Note the user’s name, email address, browser, signup date, and last login date are displayed on the Details tab.  \n\n    The user’s name is currently set the same as the email value. in the next section, we'll set the name to a more accurate value."
    },
    {
      "file": "",
      "line": 1,
      "title": "Change user parameters",
      "description": "## Change user parameters\n\n1. #### Click the _Edit_ link under the user’s name.  \n    ![profile-6](https://cdn.auth0.com/website/a0fun/v2/profile-6.gif)   \n\n1. #### Update the name to “Dave Grohl” and click the _Save_ button. The user’s display name is updated.  \n     ![profile-7](https://cdn.auth0.com/website/a0fun/v2/profile-7.gif)   \n\n1. #### Click the _Edit_ link under the user’s email.  \n\n    If you see the text _(verified)_ then you have responded to a previous email verification request sent to your email account.  \n\n    If you don’t see _(verified)_ you will see an option to manually verify the email address here. Go ahead and click the \"_Set email as verified\"_ link if it is displayed, and click the _Save_ button. The user’s email address is now marked as verified.  \n\n    ![profile-8](https://cdn.auth0.com/website/a0fun/v2/profile-8.gif)  \n\n1. #### Scroll down to the _Metadata_ section of the user’s Details.  \n\n    Both the _user_metadata_ and _app_metadata_ values are displayed here in a JSON editor.  \n\n1. #### Update the _user_metadata_ object to include a key of _“band”_ with the value of _“Foo Fighters.”_  \n\n    ![](https://cdn.auth0.com/website/training/example/A0FUN-M04-L01/img-2.png)  \n\n1. #### Update the _app_metadata_ object to include a key of “vip” with a value of true.  \n\n    ![](https://cdn.auth0.com/website/training/example/A0FUN-M04-L01/img-1.png)  \n\n1. #### Click the _Save_ button. You should see a successful save message.\n\n    ![profile-9](https://cdn.auth0.com/website/a0fun/v2/profile-9.gif)  "
    },
    {
      "file": "",
      "line": 1,
      "title": "Retrieve any user profile from the Management API",
      "description": "## Retrieve any user profile from the Management API\n\n1. #### If you're not already logged in, log in to the Auth0 Dashboard and ensure that you're on your *dev-* tenant.  \n\n1. #### In the left-hand navigation, click _Applications > APIs_.  \n\n    The _APIs_ list view is displayed. For more on APIs, check out the lab [_Working with APIs_](https://github.com/auth0-training/labs-node-working-with-apis). For the purposes of this lab, notice that an API already exists for your tenant, the _Auth0 Management API_.  \n\n    Yes, that is right we use Auth0 to secure our own APIs! The Management API is a system API with an identifier of _[https://{yourTenantName}.{yourRegion}.auth0.com/api/v2](https://{yourTenantName}.{yourRegion}.auth0.com/api/v2)_.  \n\n    ![profile-10](https://cdn.auth0.com/website/a0fun/v2/profile-10.gif)  \n\n1. #### Click the _Auth0 Management API_ link to display the _Settings_ for this API.  \n\n    Note the warning alerting you to the fact this is a special API.  \n\n1. #### Click the _Permissions_ tab located at the top of the page.  \n\n    These are all the fine grain permissions available for this API.  \n\n    ![profile-12](https://cdn.auth0.com/website/a0fun/v2/profile-12.gif)  \n\n1. #### Click the _API Explorer_ tab located at the top of the page.  \n \n    The API Explorer can be used to explore and prototype calls to the API without having to write a line of code. **If you've never used the API Explorer before, you will need to click _Create & Authorize Test Application_ on this page for the API Explorer to work.** \n\n    ![profile-13](https://cdn.auth0.com/website/a0fun/v2/profile-13.gif)  \n\n\n1. #### Click the _Copy_ button to the right of the Access Token.  \n\n    ![profile-14](https://cdn.auth0.com/website/a0fun/v2/profile-14.gif)  \n\n1. #### Examine the Access Token\n\n    Before we use the API Explorer, let's examine the Access Token we just copied. Open a tab in your browser and navigate to [_jwt.io_](https://jwt.io/).  \n\n1. #### Paste the token in the field labeled _Encoded_, replacing the sample token.  \n\n    ![profile-15](https://cdn.auth0.com/website/a0fun/v2/profile-15.gif)  \n\n    Look at the decoded JSON Payload in the _Decoded_ field on the right. Here you can see the token was issued by your tenant via the _iss_ claim. It has an _audience (aud)_ claim for your tenant’s Management API endpoint. And all the permissions are listed in the _scope_ claim.  \n\n    This means that this Access Token can be used to make calls to all of the endpoints of the Management API. So it is very useful for the API Explorer.\n\n1. #### Return to the _Auth0 Management API_ details view on the _API Explorer_ tab.  \n\n1. #### Scroll down to the _Using this token in the API Explorer_ section. \n\n1. #### Click the _Management API Explorer_ link listed in step 1.\n    The _Management API Explorer_ will open in a new tab. Feel free to bookmark this tool, it is quite useful. It can always be found at [_https://auth0.com/docs/api/management/v2_](https://auth0.com/docs/api/management/v2).  \n\n    ![profile-16](https://cdn.auth0.com/website/a0fun/v2/profile-16.gif)  \n\n1. #### Click the _SET API TOKEN_ button located in the upper right corner of the page.  \n\n    The _Set Management API Token_ modal dialog is displayed.  \n\n1. #### Paste the Access Token into the _API Token_ field and click the _Set Token_ button.\n    The Explorer will update to show your tenant domain and the allowed scopes provided by the Access Token in the left-hand navigation.  \n\n1. #### Scroll the left-hand navigation down to the _Users_ section.  \n\n1. #### Select the _Users_ link in the left-hand navigation.\n    The navigation expands to show all of the endpoints provided by this API for managing users. \n    \n1. #### Select the _List or search users_ link to view details about this endpoint.\n     Looking at the documentation for this endpoint, you can see it requires a _GET_ request to _/api/v2/users_ with an access token containing the _read:users_ and *read:user\\_idp\\_tokens* scopes.  \n\n1. #### Select _Show Optional Parameters_ to reveal a list of the parameters accepted by this endpoint.  \n\n1. #### Locate the endpoint test area to the right of this page, and click the _Test Endpoint_ button.\n    A request is made to the Management API and then you'll see the response displayed. You can see that a GET request was made to the endpoint described in the _ENDPOINT_ section. The _Response Code_ section shows the [_HTTP Status Code_](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) returned from the API, in this case, a _200_.\n    Finally, the _RESPONSE BODY_ section displays the JSON response from the API.   \n\n\n1. #### Locate the user you updated earlier in this lab in the list.\n    It should be pretty easy because at this point we have not created many users. But as you can imagine this list will grow quickly and you will need to filter it using the parameters available to the API endpoint.  \n    Of course, you do not have to search for a user if you already know their user id.  \n\n    ![profile-19](https://cdn.auth0.com/website/a0fun/v2/profile-19.gif)  \n\n1. #### Locate the *user_id* property of the user and _copy its value_. \n\n    ![profile-20](https://cdn.auth0.com/website/a0fun/v2/profile-20.gif)    \n\n1. #### In the left-hand navigation under the Users section, click the _Get a user_ link.\n    The _Get a user_ endpoint documentation is displayed. It requires a _GET_ request to _/api/v2/users/{id}_ with an Access Token containing the _read:users_ and _read:user_idp_tokens_ scopes. In the _PATH PARAMETERS_ section, you can see the _id_ parameter is required.  \n\n1. #### Locate the endpoint test area to the right of this page.\n\n1. #### Paste the user’s id into the _path: id_ field.  \n\n1. #### Click the _Test Endpoint_ button.\n\n    You should see a successful _Get a User_ response containing the user profile of the user. This profile contains all of the stored profile information of the user including **user_metadata** and **app_metadata** values you set earlier.\n    Note there are other useful properties contained in the profile that you have not seen yet. These include the number of times this user has authenticated, the last time they authenticated, and the IP address associated with the last login."
    },
    {
      "file": "",
      "line": 1,
      "title": "Update app and user metadata",
      "description": "## Update app and user metadata\n\nContinuing from where we left off using the Management API in step 4...\n\n1. #### In the left-hand navigation, scroll to the _Users_ section and click it.  \n\n    The menu will expand displaying the list of user endpoints.  \n\n1. #### Locate and click the _Update a user_ link in the submenu.  \n\n    The _Update a user_ documentation is displayed. Scroll down to the _ENDPOINT_ section to discover that this endpoint requires a _PATCH_ request to _/api/v2/users/{id}_ with an Access Token containing the _update:users_ and *update:users_app_metadata* scopes.  \n\n    The documentation goes into detail on the fields that are available for update on a user profile. It lists considerations for updating specific fields as well as several examples of how to update specific fields.  \n\n1. #### Locate the endpoint test area to the right of this page.\n\n\n1. #### Using the **user_id** you copied from the last section, paste the **user_id** into the _path: id_ field.  \n   \n    If you no longer have the **user_id**, go back to the previous step to retrieve it!\n\n\n1. #### Paste the following JSON into the _Body_ field.  \n\n    ```js\n    {\n      \"app_metadata\": {\n        \"vip\": false\n      }\n    }\n    ```\n\n1. #### Click the _Test Endpoint_ button.  \n\n    ![profile-24](https://cdn.auth0.com/website/a0fun/v2/profile-24.gif)    \n\n    You should see a successful response displayed containing the updated user profile in the _Response Body_ section (and response code 200). You should also see that the value of the _VIP_ flag is set to false now in the *app_metadata* property.  \n\n1. #### Update the _Body_ field to set the _vip_ flag to the value of _null_.  \n\n    ```js\n    {\n      \"app_metadata\": {\n        \"vip\": null\n      }\n    }\n    ```\n\n1. #### Click the _Test Endpoint_ button again.  \n\n    ![profile-25](https://cdn.auth0.com/website/a0fun/v2/profile-25.gif)    \n\n    Note this time, by setting the _VIP_ flag to a value of _null_ the _VIP_ property was removed completely. This works with most fields of the profile. If you do not want to update the field but instead remove it completely, set it’s value to _null_.  \n      \n    The *user_metadata* field can be updated in exactly the same way. \n      \n    In a previous exercise, you set a *user_metadata* property of _band_ to the value of _Foo Fighters_ for the user using the Auth0 Management Dashboard. Let’s add an additional property to store the instrument played by the user.  \n\n1. #### Update the _Body_ field to add the _instrument_ property with the value of _Guitar_.  \n  \n    ```js\n    {\n      \"user_metadata\": {\n        \"instrument\": \"guitar\"\n      }\n    }\n    ```\n\n1. #### Click the _Test Endpoint_ button one last time.  \n\n    Notice in the _Response Body_ field the _instrument_ field has been added to the *user_metadata* object. The value for the _band_ property is left intact and the instrument field was merged into the *user_metadata* object. Remember that the _Update a user_ endpoint is called with the _PATCH_ HTTP verb, so the update follows merge semantics.\n\n    ![profile-26](https://cdn.auth0.com/website/a0fun/v2/profile-26.gif)    "
    },
    {
      "file": "",
      "line": 1,
      "title": "Recap",
      "description": "## Recap\n\n**In this lab you:**\n\n* Explored user profiles in the Dashboard.\n* Retrieved the normalized profile of a user.\n* Updated app metadata using the management API explorer.\n* Updated user metadata using the management API explorer."
    }
  ]
}